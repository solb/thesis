Modern cloud computing environments strive to
provide users with two benefits:\ fine-grained
scheduling and accounting, and seamless scalability.
The most recent face to this trend is the ``serverless''
model, in which individual functions, or microservices,
are executed on demand.  Although current implementations
of this model are becoming popular, they still
operate at a relatively coarse granularity, occupying
resources for minutes at a time and requiring hundreds
of milliseconds for a cold launch.
In this paper, we describe a novel design for
providing ``functions as a service'' (FaaS) that attempts
to be truly \emph{micro}:\ cold launch times in microseconds,
enabling even finer-grained resource accounting, and
supporting latency-critical macro-services.  To do
so, we propose eschewing much of the traditional serverless
infrastructure in favor of language-based isolation that
can provide microsecond-granularity launch latency and
preemptive scheduling using the high-precision timers (HPETs).
