diff --git i/Cargo.toml w/Cargo.toml
index ccaa556..ad10d93 100644
--- i/Cargo.toml
+++ w/Cargo.toml
@@ -8,6 +8,7 @@ crate-type = ["dylib"]
 harness = false
 
 [features]
+leak = []
 notls = []
 
 [dependencies]
diff --git i/benches/inger.rs w/benches/inger.rs
index ec7263f..1920a0a 100644
--- i/benches/inger.rs
+++ w/benches/inger.rs
@@ -9,7 +9,13 @@ use std::sync::atomic::AtomicBool;
 use std::sync::atomic::AtomicU64;
 use std::sync::atomic::Ordering;
 
-benchmark_group![bench, pause, resume, renew];
+benchmark_group![bench, launch, pause, resume, renew];
+
+fn launch(lo: &mut Bencher) {
+	use inger::launch;
+
+	lo.iter(|| launch(|| (), u64::max_value()));
+}
 
 fn pause(lo: &mut Bencher) {
 	use inger::STACK_N_PREALLOC;
diff --git i/src/groups.rs w/src/groups.rs
index f43e404..daa26a5 100644
--- i/src/groups.rs
+++ w/src/groups.rs
@@ -12,7 +12,7 @@ pub fn assign_group() -> SyncResult<'static, GotchaGroup> {
 	static mut GROUPS: Option<SyncPool<GotchaGroup>> = None;
 	static INIT: Once = Once::new();
 	INIT.call_once(|| unsafe {
-		GROUPS.replace(SyncPool::new(GotchaGroup::new));
+		GROUPS.replace(SyncPool::new_leaky(GotchaGroup::new, cfg!(feature = "leak")));
 	});
 
 	let groups = unsafe {
diff --git i/src/reusable.rs w/src/reusable.rs
index ee753f0..0e0edd1 100644
--- i/src/reusable.rs
+++ w/src/reusable.rs
@@ -27,9 +27,14 @@ where &'a A: SharedMut<Vec<T>> {
 	type Error = Option<<&'a A as SharedMut<Vec<T>>>::Error>;
 
 	fn try_from(pool: &'a Pool<T, B, A>) -> StdResult<Reusable<'a, T, A>, Self::Error> {
+		let leaky = pool.leaky;
 		let builder = &pool.builder;
 		let pool = &pool.allocated;
-		let value = pool.try_into_inner()?.pop().or_else(builder);
+		let value = if leaky {
+			builder().or_else(|| pool.try_into_inner().unwrap().pop())
+		} else {
+			pool.try_into_inner()?.pop().or_else(builder)
+		};
 		if value.is_some() {
 			Ok(Self {
 				value,
@@ -72,6 +77,7 @@ where &'a A: SharedMut<Vec<T>> {
 
 pub struct Pool<T, B: ?Sized = fn() -> Option<T>, A = Unsync<T>> {
 	_type: PhantomData<T>,
+	leaky: bool,
 	allocated: A,
 	builder: B,
 }
@@ -81,10 +87,15 @@ pub type SyncPool<T, B = fn() -> Option<T>> = Pool<T, B, Sync<T>>;
 impl<'a, T, F: Fn() -> Option<T>, C: Default + 'a> Pool<T, F, C>
 where &'a C: SharedMut<Vec<T>> {
 	pub fn new(builder: F) -> Self {
+		Self::new_leaky(builder, false)
+	}
+
+	pub fn new_leaky(builder: F, leaky: bool) -> Self {
 		Self {
 			_type: PhantomData::default(),
+			leaky,
 			allocated: C::default(),
-			builder: builder,
+			builder,
 		}
 	}
 
