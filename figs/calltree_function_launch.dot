strict digraph {
	edge [arrowhead=none];
	node [shape=none, width=0, height=0, label=""];

	caller [label="caller module"];
	control [label=<<i>libinger</i>>];
	gotcha [label=<<i>libgotcha</i>>];
	callee [label="callee module"];

	{
		// This weight must be at least the number of horizontal arrows.
		edge [style=dotted, weight=5];

		caller -> callerA -> callerB -> callerC -> callerD;
		callerD -> callerE [style=solid, penwidth=2];
		callerE -> callerF -> callerG -> callerH -> callerI -> caller_handler;
		caller_handler -> callerJ [style=solid, penwidth=2];
		callerJ -> callerK -> callerL -> callerM -> callerN;

		control -> controlA;
		controlA -> controlB [style=solid, penwidth=2, color=red];
		controlB -> controlC;
		controlC -> controlD [style=solid, penwidth=2];
		controlD -> controlE -> controlF -> controlG -> controlH
		controlH -> controlI [style=solid, penwidth=2, color=red];
		controlI -> control_handler [style=solid, penwidth=2];
		control_handler -> controlJ;
		controlJ -> controlK [style=solid, penwidth=2];
		controlK -> controlL;
		controlL -> controlM [style=solid, penwidth=2, color=red];
		controlM -> controlN;

		gotcha -> gotchaA -> gotchaB;
		gotchaB -> gotchaC [style=solid, penwidth=2, color=red];
		gotchaC -> gotchaD -> gotchaE;
		gotchaE -> gotchaF [style=solid, penwidth=2];
		gotchaF -> gotchaG;
		gotchaG -> gotchaH [style=solid, penwidth=2, color=red];
		gotchaH -> gotchaI -> gotcha_handler -> gotchaJ -> gotchaK;
		gotchaK -> gotchaL [style=solid, penwidth=2];
		gotchaL -> gotchaM -> gotchaN;

		callee -> calleeA -> calleeB -> calleeC -> calleeD -> calleeE -> calleeF;
		calleeF -> calleeG [style=solid, penwidth=2, color=red];
		calleeG -> calleeH -> calleeI -> callee_handler -> calleeJ -> calleeK -> calleeL -> calleeM -> calleeN;
	}

	{
		rank=same;
		callerA -> controlA [label=<<font face="monospace">launch(<i>F</i>)</font>>, arrowhead=normal, color=red];
	}

	{
		rank=same;
		controlB -> gotchaB [label=<<font face="monospace">libset_thread_set_next()</font>>, arrowhead=normal, color=red];
	}

	{
		rank=same;
		controlC -> gotchaC [style=dashed, arrowhead=normal, dir=back];
	}

	{
		rank=same;
		callerD -> controlD [label=<<font face="monospace"><i>F</i>()</font>>, arrowhead=normal, dir=back];
	}

	{
		rank=same;
		callerE -> controlE [label=<<font face="monospace">callee()</font>                                                               >, headlabel=<(redirected to <font face="monospace">procedure_linkage_override()</font>)>];
		controlE -> gotchaE [arrowhead=normal];
	}

	{
		rank=same;
		gotchaF -> calleeF [label=<<font face="monospace">callee()</font>>, arrowhead=normal, color=red];
	}

	{
		rank=same;
		gotchaG -> calleeG [style=dashed, arrowhead=normal, dir=back, color=red];
	}

	{
		rank=same;
		controlH -> gotchaH [label=<<font face="monospace">return_callback()</font>>, arrowhead=normal, dir=back, color=red];
	}

	{
		rank=same;
		caller_handler -> control_handler [style=dashed, arrowhead=normal, dir=back];
	}

	{
		rank=same;
		callerJ -> controlJ [style=dashed, arrowhead=normal];
	}

	{
		rank=same;
		controlK -> gotchaK [label=<<font face="monospace">libset_thread_set_next()</font>>, arrowhead=normal];
	}

	{
		rank=same;
		controlL -> gotchaL [style=dashed, arrowhead=normal, dir=back, color=red];
	}

	{
		rank=same;
		callerM -> controlM [style=dashed, arrowhead=normal, dir=back, color=red];
	}
}
