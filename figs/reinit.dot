strict digraph {
	rankdir=LR;
	node [label=""];

	start [shape=none];
	renew [shape=none];
	next [shape=none];
	install [shape=none];

	{
		rank=same;
		edge [style=invisible, arrowhead=none];

		start -> renew;
		renew -> next;
		next -> install;
	}

	ctor [label=<<i>libgotcha</i> constructor>];
	copy [label="library initializer"];
	rtld [label="dynamic linker/loader"];
	back [label="backup store"];
	mcpy [label="memcpy()"];

	start -> ctor [label="at program start"];
	ctor -> copy [style=dashed, label=<<b>for each</b> libset and library>];
	copy -> rtld [label="1. load a copy of the library"];
	copy -> back [style=dashed, label=<2. <b>for each</b> writeable address range>];
	back -> mcpy [label="capture in-memory snapshot"];

	reinit [label="libset_reinit()"];
	restore [label="static data restorer"];
	back2 [label="backup store"];
	water [label="libset version watermark"]
	mcpy2 [label="memcpy()"];

	renew -> reinit [label="control library call"];
	reinit -> restore [style=dashed, label=<<b>for each</b> libset and library>];
	restore -> back2 [style=dashed, label=<1. <b>for each</b> writeable address range>];
	restore -> water [label="2. increment latest version[libset]"];
	back2 -> mcpy2 [label="restore statics from snapshot"];

	set [label="libset_thread_set_next()"];
	segment [label="arch_prctl()"];
	restore2 [label="TLS data restorer"];
	mcpy3 [label="memcpy()"];
	version [label="TLS libset version"];

	next -> set [label="control library call"];
	install -> segment [label="change TCB selector"];

	set->restore2 [label=<<b>if</b> TLS version[libset] out of date>];
	segment->restore2 [label=<<b>if</b> TLS version[libset] out of date>];
	restore2 -> mcpy3 [label="1. restore TLS from snapshot"];
	restore2 -> version [label="2. update TLS version[libset]"];
}
