strict digraph {
	edge [arrowhead=none];
	node [shape=none, width=0, height=0, label=""];

	caller [label="caller module"];
	control [label="control library"];
	gotcha [label=<<i>libgotcha</i>>];
	callee [label="callee module"];

	{
		// This weight must be at least the number of horizontal arrows.
		edge [style=dotted, weight=7];

		caller -> callerA -> callerB -> callerC -> callerD -> callerE -> callerF -> callerG -> callerH -> callerI;

		control -> controlA -> controlB;
		controlB -> controlC [style=solid, penwidth=2, color=red];
		controlC -> controlD -> controlE -> controlF;
		controlF -> controlG [style=solid, penwidth=2, color=red];
		controlG -> controlH -> controlI;

		gotcha -> gotchaA;
		gotchaA -> gotchaB [style=solid, penwidth=2];
		gotchaB -> gotchaC;
		gotchaC -> gotchaD [style=solid, penwidth=2, color=red];
		gotchaD -> gotchaE;
		gotchaE -> gotchaF [style=solid, penwidth=2, color=red];
		gotchaF -> gotchaG;
		gotchaG -> gotchaH [style=solid, penwidth=2, color=red];
		gotchaH -> gotchaI;

		callee -> calleeA -> calleeB -> calleeC -> calleeD;
		calleeD -> calleeE [style=solid, penwidth=2, color=red];
		calleeE -> calleeF -> calleeG -> calleeH -> calleeI;
	}

	{
		rank=same;
		callerA -> controlA [label=<<font face="monospace">callee()</font>                                                               >, headlabel=<(redirected to <font face="monospace">procedure_linkage_override()</font>)>];
		controlA -> gotchaA [arrowhead=normal];
	}

	{
		rank=same;
		controlB -> gotchaB [label="call_callback()", fontname="monospace" arrowhead=normal, dir=back, color=red];
	}

	{
		rank=same;
		controlC -> gotchaC [style=dashed, arrowhead=normal, color=red];
	}

	{
		rank=same;
		gotchaD -> calleeD [label="callee()", fontname="monospace", arrowhead=normal, color=red];
	}

	{
		rank=same;
		gotchaE -> calleeE [style=dashed, arrowhead=normal, dir=back, color=red];
	}

	{
		rank=same;
		controlF -> gotchaF [label="return_callback()", fontname="monospace", arrowhead=normal, dir=back, color=red];
	}

	{
		rank=same;
		controlG -> gotchaG [style=dashed, arrowhead=normal, color=red];
	}

	{
		rank=same;
		callerH -> controlH [style=dashed, arrowhead=normal, dir=back];
		controlH -> gotchaH [style=dashed];
	}
}
